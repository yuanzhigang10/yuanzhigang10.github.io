<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Anaconda使用总结]]></title>
    <url>%2F2016%2Fuse-anaconda%2F</url>
    <content type="text"><![CDATA[本文其他地址：简书 / 伯乐在线 序Python易用，但用好却不易，其中比较头疼的就是包管理和Python不同版本的问题，特别是当你使用Windows的时候。为了解决这些问题，有不少发行版的Python，比如WinPython、Anaconda等，这些发行版将python和许多常用的package打包，方便pythoners直接使用，此外，还有virtualenv、pyenv等工具管理虚拟环境。 个人尝试了很多类似的发行版，最终选择了Anaconda，因为其强大而方便的包管理与环境管理的功能。该文主要介绍下Anaconda，对Anaconda的理解，并简要总结下相关的操作。 Anaconda简介与安装Anaconda概述Anaconda是一个用于科学计算的Python发行版，支持 Linux, OS X, Windows系统，提供了包管理与环境管理的功能，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。Anaconda利用工具/命令conda来进行package和environment的管理，并且已经包含了Python和相关的配套工具。 这里先解释下conda、anaconda这些概念的差别。conda可以理解为一个工具，也是一个可执行命令，其核心功能是包管理与环境管理。包管理与pip的使用类似，环境管理则允许用户方便地安装不同版本的python并可以快速切换。Anaconda则是一个打包的集合，里面预装好了conda、某个版本的python、众多packages、科学计算工具等等，所以也称为Python的一种发行版。其实还有Miniconda，顾名思义，它只包含最基本的内容——python与conda，以及相关的必须依赖项，对于空间要求严格的用户，Miniconda是一种选择。 进入下文之前，说明一下conda的设计理念——conda将几乎所有的工具、第三方包都当做package对待，甚至包括python和conda自身！因此，conda打破了包管理与环境管理的约束，能非常方便地安装各种版本python、各种package并方便地切换。 Anaconda的安装Anaconda的下载页参见官网下载，Linux、OS X、Windows均支持。 安装时，会发现有两个不同版本的Anaconda，分别对应Python 2.7和Python 3.5，两个版本其实除了这点区别外其他都一样。后面我们会看到，安装哪个版本并不本质，因为通过环境管理，我们可以很方便地切换运行时的Python版本。（由于我常用的Python是2.7和3.4，因此倾向于直接安装Python 2.7对应的Anaconda） 下载后直接按照说明安装即可。这里想提醒一点：尽量按照Anaconda默认的行为安装——不使用root权限，仅为个人安装，安装目录设置在个人主目录下（Windows就无所谓了）。这样的好处是，同一台机器上的不同用户完全可以安装、配置自己的Anaconda，不会互相影响。 对于OS X、Linux系统，Anaconda安装好后，实际上就是在主目录下多了个文件夹（~/anaconda）而已，Windows会写入注册表。安装时，安装程序会把bin目录加入PATH（Linux/OS X写入~/.bashrc，Windows添加到系统变量PATH），这些操作也完全可以自己完成。以Linux/OS X为例，安装完成后设置PATH的操作是 1234# 将anaconda的bin目录加入PATH，根据版本不同，也可能是~/anaconda3/binecho 'export PATH="~/anaconda2/bin:$PATH"' &gt;&gt; ~/.bashrc# 更新bashrc以立即生效source ~/.bashrc 配置好PATH后，可以通过which conda或conda --version命令检查是否正确。假如安装的是Python 2.7对应的版本，运行python --version或python -V可以得到Python 2.7.12 :: Anaconda 4.1.1 (64-bit)，也说明该发行版默认的环境是Python 2.7。 Conda使用与配置Conda的环境管理Conda的环境管理功能允许我们同时安装若干不同版本的Python，并能自由切换。对于上述安装过程，假设我们采用的是Python 2.7对应的安装包，那么Python 2.7就是默认的环境（默认名字是root，注意这个root不是超级管理员的意思）。 假设我们需要安装Python 3.4，此时，我们需要做的操作如下： 123456789101112131415161718# 创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）conda create --name python34 python=3.4# 安装好后，使用activate激活某个环境activate python34 # for Windowssource activate python34 # for Linux &amp; OS X# 激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH# 此时，再次输入python --version# 可以得到`Python 3.4.5 :: Anaconda 4.1.1 (64-bit)`，即系统已经切换到了3.4的环境# 如果想返回默认的python 2.7环境，运行deactivate python34 # for Windowssource deactivate python34 # for Linux &amp; OS X# 删除一个已有的环境conda remove --name python34 --all 用户安装的不同python环境都会被放在目录~/anaconda/envs下，可以在命令中运行conda info -e查看已安装的环境，当前被激活的环境会显示有一个星号或者括号。 说明：有些用户可能经常使用python 3.4环境，因此直接把~/anaconda/envs/python34下面的bin或者Scripts加入PATH，去除anaconda对应的那个bin目录。这个办法，怎么说呢，也是可以的，但总觉得不是那么elegant…… 如果直接按上面说的这么改PATH，你会发现conda命令又找不到了（当然找不到啦，因为conda在~/anaconda/bin里呢），这时候怎么办呢？方法有二：1. 显示地给出conda的绝对地址 2. 在python34环境中也安装conda工具。 Conda的包管理Conda的包管理就比较好理解了，这部分功能与pip类似。 例如，如果需要安装scipy： 1234567# 安装scipyconda install scipy# conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）# 查看已经安装的packagesconda list# 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包 conda包管理一些常用的操作如下： 12345678910111213141516171819# 查看当前环境下已安装的包conda list# 查看某个指定环境的已安装包conda list -n python34# 查找package信息conda search numpy# 安装packageconda install -n python34 numpy# 如果不用-n指定环境名称，则被安装在当前活跃环境# 也可以通过-c指定通过某个channel安装# 更新packageconda update -n python34 numpy# 删除packageconda remove -n python34 numpy 前面已经提到，conda将conda、python等都视为package，因此，完全可以使用conda来管理conda和python的版本，例如 123456789# 更新conda，保持conda最新conda update conda# 更新anacondaconda update anaconda# 更新pythonconda update python# 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本 补充：如果创建新的python环境，比如3.4，运行conda create -n python34 python=3.4之后，conda仅安装python 3.4相关的必须项，如python, pip等，如果希望该环境像默认环境那样，安装anaconda集合包，只需要： 123456# 在当前环境下安装anaconda包集合conda install anaconda# 结合创建环境的命令，以上操作可以合并为conda create -n python34 python=3.4 anaconda# 也可以不用全部安装，根据需求安装自己需要的package即可 设置国内镜像如果需要安装很多packages，你会发现conda下载的速度经常很慢，因为Anaconda.org的服务器在国外。所幸的是，清华TUNA镜像源有Anaconda仓库的镜像，我们将其加入conda的配置即可： 123456# 添加Anaconda的TUNA镜像conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/# TUNA的help中镜像地址加有引号，需要去掉# 设置搜索时显示通道地址conda config --set show_channel_urls yes 执行完上述命令后，会生成~/.condarc(Linux/OS X)或C:\Users\USER_NAME\.condarc文件，记录着我们对conda的配置，直接手动创建、编辑该文件是相同的效果。 跋Anaconda具有跨平台、包管理、环境管理的特点，因此很适合快速在新的机器上部署Python环境。总结而言，整套安装、配置流程如下： 下载Anaconda、安装 配置PATH（bashrc或环境变量），更改TUNA镜像源 创建所需的不用版本的python环境 Just Try! cheat-sheet 下载：Conda cheat sheet 参考资料 Anaconda Homepage Anaconda Documentation Conda Docs]]></content>
      <tags>
        <tag>Anaconda</tag>
        <tag>Conda</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文档、文案与知识管理]]></title>
    <url>%2F2016%2Fword-latex-manage%2F</url>
    <content type="text"><![CDATA[注：本文为文档排版与文案设计（20160331）讲座讲义。 致谢声明： 本教程中LaTeX部分参考了LaTeX Notes (2nd)和thulib-latex-talk相关内容，在此向原作者表示感谢 :) 排版软件概述Word 图形化界面 所见即所得（What you see is what you get） 日常办公、学习中应用广泛 LaTeX 编译型排版系统 TeX Donald E. Knuth, 1978 TeX 3.14159265 LaTeX Leslie Lamport Word/LaTeX 对比 Microsoft® Word LaTeX 字处理工具 专业排版软件 容易上手，简单直观 门槛稍高，上手后容易 所见即所得 所想即所得 高级功能不易掌握 进阶难，但一般用不到 处理长文档需要丰富经验 和短文档处理基本无异 同时关注内容和格式 仅关注内容即可 公式排版差强人意 尤其擅长公式排版 二进制格式 文本文件+编译 付费商业许可 自由免费试用 Word的使用Word基础操作 基本设置、自定义选项卡 标题栏、菜单栏、工具栏、状态栏 Ribbon界面（固定/悬浮） 选项卡可以定制，但一般不太需要 键盘/鼠标快捷操作（如全选、行选、矩形框选择） 复制、粘贴（各种粘贴模式） 视图模式 页面视图、大纲视图（显示文章真正的内容，去掉格式的影响） 阅读视图（个人喜好） 拆分视图功能很常用（需要同时阅读文档的两个不同部分） 导航、搜索、查找与替换 建议打开导航窗格（新版本的Word把简单的搜索也加入导航窗格） 搜索、查找、替换（重视高级功能，如正则匹配，加快效率） 段落、段落设置 排版中段的概念（新起一行 != 新的一段） 段落缩进的概念 硬回车(Enter)与软回车(Shift+Enter) 区分：段落缩进 &amp; TAB &amp; 空格（大纲视图里查看区别） 有些设置是段落意义上的，比如缩进、行间距等（段落选项卡） 项目符号与编号 不同级别的项目内部是依靠缩进实现的 可以设置缩进间距等参数（右键——调整列表缩进） 项目的自动编号（与样式配合使用） 页面版式、布局 可以调节页边距、横版竖版、分栏等 如何局部分栏（配合分节查看结果） 分页与分节 分页是物理意义上的，分节是排版意义上的 分页：软分页、硬分页（Ctrl+Enter） 分节：有些概念是针对节的，节是Word管理不同章节结构的重要机制 以页码为例介绍分节，如何设置不同的页码格式 Word图表使用 Word里的图形 简单图形绘制（插入——形状，复杂组合图案注意“新建绘图画布”） SmartArt（简单版本的Visio） 不要再用Word的艺术字了，真的很丑。。。 插入外源图片 图片的简单处理 压缩！裁剪、简单扣除背景（可替代简单的PS操作） 区分：背景白/无背景 辅助软件 PowerPoint、Visio、Photoshop 矢量图与点阵图 Word里的表格 表格样式、对齐 绘图，注意区分 区分：无边框/白色边框/擦除边框 重复标题行（属性）、从文字新建表格（快捷） Excel——实现更为复杂的功能 表格的巧用——文字对齐（做封面等） Word图表使用原则 样式统一 自动索引（演示） 自动更新（本质上是更新域的值） 删除——“错误！未找到引用源”（类比指针的概念，失去指向的对象） 自动目录 自定义标签（表格 -&gt; 案例） Word结构化排版 结构化排版的意识！ 文章的逻辑结构（篇、章、节） 与LaTeX中的section概念类比 级别设置（默认的太丑） 自动编号 导航窗格（可以拖拽，整体移动） 自定义不同级别格式 -&gt; 个人模板 自动索引/目录（TOC标题、目录1、目录2经常有bug…） 转pdf时会自动输出“书签” 同一级别的也有两种样式！（如带编号、不带编号） 更多操作：自己多动手试试！ PowerPoint/Excel的使用PowerPoint/Excel略讲，基本原理与Word类似。 PowerPoint的使用 PowerPoint到底可以做什么？ 展示（汇报、答辩、宣传）、海报、视频 some PowerPoint, no Power, also no Point... PPT只是你的表达的辅助，不宜过多文字，更忌念PPT的行为 不要滥用分级（超过3级听众便已很难follow） 重视幻灯片母版 demo Excel的使用 想清楚你的使用目的（展示？数据统计？） 数据统计 按照关系型数据库的思维建立表格 函数使用：SUM, AVERAGE, COUNTIF, RANK, VLOOKUP 单元格的相对引用(E3)与绝对引用($E$3) Misc: 冻结首行，视图 文本格式与分列（避免手机号等显示时被保留截断，注意仅更改单元格格式并不起作用） More about MS Office: VBA编程，自定义个人需求 LaTeX的使用LaTeX简介 LaTeX是一种文字排版系统，基于TeX排版系统并由此发展而来。 LaTeX简史 时间 关键词 1976-1978 Donald E. Knuth, The Art of Programming, TeX 1982 AMS-TeX, AMSFonts 1984 Plain TeX 1984-1985 Leslie Lamport, LaTeX 1989 Mittelbach, LaTeX3 1991-1993 Comprehensive TeX Archive Network (CTAN) 1994 LaTeX2e 2007 XeTeX, XeLaTeX 如果将LaTeX比作一个宏伟的建筑，TeX就是它的基础，所有的TeX基本命令和扩展命令都是构成LaTeX的基础。 从排版的角度看待LaTeX（TeX是一种语言也是一个排版引擎） 图像数据（RIP） 页面描述语言（DVI、PS、PDF） 标记语言（troff、SGML、TeX系列） 软件准备 遵照TeX的规范将一套实用程序打包集成在一起，形成发行版（distribution） 操作系统 发行版 编辑器 通用 TeX Live TeXworks Windows MikTeX TeXstudio Mac OS MacTeX TeXShop LaTeX功能演示 演示TeX系统针对不同格式和引擎组合，提供了一系列命令行程序，完成不同的编译和转换功能。 LaTeX XeLaTeX (+ utf-8) 中文支持最好 文章的结构 part, chapter section, subsection, subsubsection paragraph, subparagraph 各种功能演示 文本、公式、字体、版面、表格、插图 幻灯片制作 \documentclass{beamer} 再谈结构化与模板 模板：已经设计好的格式框架 使用户专注于内容 MS Word 很少有人有意识地在Word中使用模板 自定义、自动化 学习LaTeX能够帮助自己更科学地使用Word LaTeX学习资料 学习资料推荐 CTAN HomePage CTeX HomePage The Not So Short Introduction to LaTeX2e (lshort) [home] [lshort-en.pdf] [lshort-zh-cn.pdf] LaTeX Notes (2nd) [pdf] [src] LaTeX入门, 刘海洋(milksea) 利用好各种文档 常见问题 编译不通过 缺少必要宏包，命令拼写错误，括号未配对等 表格图片乱跑 LaTeX自身的浮动定位算法 段落间距变大 LaTeX排版算法 文案与知识管理 有道无术，术尚可求；有术无道，则止于术。 “道”——文案设计的原则 形式 结构化排版 模板、文档规范 简洁大方（不使用过于复杂的格式） 尽量使用文字大小区别级别，避免过多字体 空行与段间距（避免手工） 内容 书面语言，注意用语正式（场合） 话说到刚刚好，不假不空不啰嗦 言简、意赅、理明 换位思考，文案面向的对象 语言是否合适，表述是否有歧义（审阅） 再谈Word/LaTeX 设计理念：内容与格式分离，编辑与编译分离 软件：最大内聚，最小耦合——一个程序只需要做好一件事 好的排版软件应当让用户专注于内容，而非格式 推荐关注Markdown 个人知识管理 软件协作 文档：Word, LaTeX, Markdown 公式：LaTeX, MathType 绘图：PowerPoint, Excel, Visio, Adobe Ps 数据：Excel, Access, MySQL 展示：PowerPoint, Keynote, Prezi 设计：PowerPoint, Adobe Series 文献：EndNote, NoteExpress, Mendeley 知识管理 备份意识：网盘, Git/SVN 你真的一定需要文档么？ 笔记：Evernote, Youdao, OneNote 导图：MindManager 再谈软件与工具 精益求精 知识再整合带来的效益 工具永远只是工具，不要被工具反束缚]]></content>
      <tags>
        <tag>Word</tag>
        <tag>LaTeX</tag>
        <tag>排版</tag>
        <tag>文案</tag>
      </tags>
  </entry>
</search>
